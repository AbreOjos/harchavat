plugins {
    id 'java'
}

group 'hamama.automation'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

dependencies {
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '3.8.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.16'
    compile group: 'com.opencsv', name: 'opencsv', version: '4.5'
    compile group: 'ch.ethz.ganymed', name: 'ganymed-ssh2', version: '262'
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.15'
//    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
    implementation group: 'commons-net', name: 'commons-net', version: '3.6'
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'org.json', name: 'json', version: '20190722'

//    compileOnly 'org.projectlombok:lombok:1.18.8'
//    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    compile fileTree(dir: 'libs', include: '*.jar')

    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'
//    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.6.5'
}

//jar {
//    manifest {
//        attributes 'Main-Class': 'mainclass.MainClass'
//    }
//}

test {
    dependsOn 'cleanTest'
    testLogging.showStandardStreams = true

    useTestNG {
        systemProperties System.getProperties()
        if (System.properties['groups']) {
            includeGroups System.properties['groups']
        }
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testChrome(type: Test, dependsOn: 'cleanTest') {
    testLogging.showStandardStreams = true

    useTestNG() {
        includeGroups 'chrome'
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running Chrome test: " + descriptor)
    }

    testLogging {
        events "passed", "skipped", "failed", "started"
        exceptionFormat "short"

        debug {
            exceptionFormat "full"
        }
    }
}

task testFirefox(type: Test, dependsOn: 'cleanTest') {
    testLogging.showStandardStreams = true

    useTestNG() {
        includeGroups 'firefox'
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running Firefox test: " + descriptor)
    }

    testLogging {
        events "passed", "skipped", "failed", "started"
        exceptionFormat "short"

        debug {
            exceptionFormat "full"
        }
    }
}

task testIExplorer(type: Test, dependsOn: 'cleanTest') {
    testLogging.showStandardStreams = true

    useTestNG() {
        includeGroups 'iexplorer'
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running InternetExplorer test: " + descriptor)
    }

    testLogging {
        events "passed", "skipped", "failed", "started"
        exceptionFormat "short"

        debug {
            exceptionFormat "full"
        }
    }
}

task testEdge(type: Test, dependsOn: 'cleanTest') {
    testLogging.showStandardStreams = true

    useTestNG() {
        includeGroups 'edge'
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running Edge test: " + descriptor)
    }

    testLogging {
        events "passed", "skipped", "failed", "started"
        exceptionFormat "short"

        debug {
            exceptionFormat "full"
        }
    }
}

task usage {
    doLast {
        println "USAGE:"
        println "'gradle test'  --  ran all tests"
        println "'gradle test -Dgroups=chrome' or 'gradle testChrome' -- run Chrome tests only"
        println "'gradle test -Dgroups=firefox' or 'gradle testFirefox' -- run Firefox tests only"
        println "'gradle test -Dgroups=iexplorer' or 'gradle testIExplorer' -- run InternetExplorer tests only"
        println "'gradle test -Dgroups=edge' or 'gradle testEdge' -- run Edge tests only"
    }
}

task hello {
    doLast {
        println "run build file '$buildFile.name' from '$buildFile.parentFile.name'"
    }
}

//task listJars {
//    configurations.compile.each { File file -> println file.name }
//}